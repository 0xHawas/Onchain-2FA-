// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import "./OnchainAuthTrap.sol";
import "./ProtectedTreasury.sol";
import "./TestToken.sol";

contract DeployAuthTrap is Script {
    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

        vm.startBroadcast(deployerPrivateKey);

        // Deploy trap with rotation interval (e.g., every 20 blocks)
        OnchainAuthTrap trap = new OnchainAuthTrap(20);

        // Deploy test token
        TestToken token = new TestToken();

        // Deploy treasury protected by the trap
        ProtectedTreasury treasury = new ProtectedTreasury(address(token), address(trap));

        // Fund treasury
        token.transfer(address(treasury), 1000 ether);

        vm.stopBroadcast();

        console.log("Trap:", address(trap));
        console.log("            Token:", address(token));
        console.log("Treasury:", address(treasury));
    }
}
